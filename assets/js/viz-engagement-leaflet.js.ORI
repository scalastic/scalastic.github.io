  document.addEventListener('DOMContentLoaded', function() {

      var map = L.map('map').setView([48.8566, 2.3522], 2);

      L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attribution">CARTO</a>',
          maxZoom: 20,
      }).addTo(map);

      var cfg = {
          "radius": 1.5,
          "maxOpacity": .8,
          "minZoom": 1,
          "scaleRadius": true,
          "useLocalExtrema": false,
          gradient: {
              0.125: "rgb(173, 216, 230)", // Bleu clair
              0.25: "rgb(135, 206, 235)",  // Bleu ciel
              0.375: "rgb(0, 255, 255)",   // Aqua
              0.5: "rgb(144, 238, 144)",   // Vert clair
              0.625: "rgb(255, 255, 0)",   // Jaune
              0.75: "rgb(255, 165, 0)",    // Orange
              0.875: "rgb(255, 69, 0)",    // Rouge orangé
              1.0: "rgb(128, 0, 128)"      // Violet
          },
          latField: 'l',
          lngField: 'L',
          valueField: 'c'
      };

      var heatmapLayer = new HeatmapOverlay(cfg).addTo(map);

      fetch('/assets/js/viz-engagement-leaflet.json').then(response => response.json()).then(data => {

          // Controls
          L.Control.CustomFilter = L.Control.extend({
              onAdd: function(map) {
                  // Création d'un div qui contiendra le contrôle
                  var div = L.DomUtil.create('div', 'custom-filter-control');

                  // Empêche la carte de traiter les événements de souris sur les contrôles
                  L.DomEvent.disableClickPropagation(div);

                  // Referer filter
                  const allOptionReferer = document.createElement('option');
                  allOptionReferer.value = 'all';
                  allOptionReferer.innerText = 'Tous';
                  const referers = [...new Set(data.map(item => item.r))];
                  const sortedReferers = referers.sort();
                  const selectReferer = L.DomUtil.create('select', 'selectReferer', div);
                  selectReferer.appendChild(allOptionReferer);
                  sortedReferers.forEach(referer => {
                      const option = document.createElement('option');
                      option.value = referer;
                      option.innerText = referer;
                      selectReferer.appendChild(option);
                  });
                  // Device Type filter
                  const allOptionDeviceType = document.createElement('option');
                  allOptionDeviceType.value = 'all';
                  allOptionDeviceType.innerText = 'Tous';
                  const deviceType = [...new Set(data.map(item => item.d))];
                  const sortedDeviceType = deviceType.sort();
                  const selectDeviceType = L.DomUtil.create('select', 'selectDeviceType', div);
                  selectDeviceType.appendChild(allOptionDeviceType);
                  sortedDeviceType.forEach(deviceType => {
                      const option = document.createElement('option');
                      option.value = deviceType;
                      option.innerText = deviceType;
                      selectDeviceType.appendChild(option);
                  });
                  // OS filter
                  const allOptionOS = document.createElement('option');
                  allOptionOS.value = 'all';
                  allOptionOS.innerText = 'Tous';
                  const os = [...new Set(data.map(item => item.o))];
                  const sortedOS = os.sort();
                  const selectOS = L.DomUtil.create('select', 'selectOS', div);
                  selectOS.appendChild(allOptionOS);
                  sortedOS.forEach(os => {
                      const option = document.createElement('option');
                      option.value = os;
                      option.innerText = os;
                      selectOS.appendChild(option);
                  });

                  // Gestion des changements de sélection
                  L.DomEvent.on(selectReferer, 'change', function() {
                      filterData(selectReferer, selectDeviceType, selectOS);
                  });
                  L.DomEvent.on(selectDeviceType, 'change', function() {
                      filterData(selectReferer, selectDeviceType, selectOS);
                  });
                  L.DomEvent.on(selectOS, 'change', function() {
                      filterData(selectReferer, selectDeviceType, selectOS);
                  });

                  return div;
              }
          });

          // Création de l'instance du contrôle et ajout à la carte
          var customFilterControl = new L.Control.CustomFilter({ position: 'topright' });
          customFilterControl.addTo(map);

          // Data Processing
          data.forEach(point => { point.c = 1; });
          heatmapLayer.setData({ data: data });

          function filterData(selectReferer, selectDeviceType, selectOS) {
              const selectedReferer = selectReferer.value;
              const selectedDeviceType = selectDeviceType.value;
              const selectedOS = selectOS.value;

              let filteredData = data;

              if (selectedReferer !== 'all') {
                  filteredData = filteredData.filter(item => item.r === selectedReferer);
              }

              if (selectedDeviceType !== 'all') {
                  filteredData = filteredData.filter(item => item.d === selectedDeviceType);
              }

              if (selectedOS !== 'all') {
                  filteredData = filteredData.filter(item => item.o === selectedOS);
              }

              heatmapLayer.setData({ data: filteredData });

          }

      });

      map.on('zoomend', function() {
          var zoomLevel = map.getZoom();
          var newRadius = Math.max(0.1, 1.5 - zoomLevel / 5);
          heatmapLayer.cfg.radius = newRadius;
          heatmapLayer._update();
      });

  });