---
layout: post
title: "Commandes Git Essentielles : Passez de D√©butant √† Expert"
date: 2023-05-28 15:47:00 +0200
description: "Devenez expert en Git et apprenez √† utiliser les commandes add, stash, commit, branch, checkout, cherry-pick, reset, revert, rebase, log, HEAD"
img: tuto-git.jpg
fig-caption: Photo de <a href="https://unsplash.com/fr/@barkernotbaker?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">James Barker</a> sur <a href="https://unsplash.com/fr/photos/v3-zcCWMjgM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
tags: [Git, Tutorial, DevOps, Dev, Practice]
lang: fr
permalink: /complete-git-guide/
status: finished
---

Dans ce guide des commandes Git, nous explorerons les concepts essentiels n√©cessaires pour ma√Ætriser l'outil de contr√¥le
de version le plus utilis√© au monde. Bien que la plupart des d√©veloppeurs se contentent des commandes de base, nous 
verrons des situations concr√®tes o√π l'utilisation des fonctionnalit√©s avanc√©es de Git peut faire 
gagner du temps, r√©soudre des probl√®mes complexes, am√©liorer votre processus de travail et surtout, faire de vous un 
d√©veloppeur serein et expert dans le maniement de Git.

<hr class="hr-text" data-content="Sommaire">

* TOC
{:toc}

<hr class="hr-text" data-content="Pr√©sentation">

## Pr√©sentation de Git

Git a √©t√© d√©velopp√© par Linus Torvalds en 2005 pour r√©pondre aux besoins sp√©cifiques du d√©veloppement du noyau Linux. √Ä 
l'√©poque, les syst√®mes de contr√¥le de version existants √©taient lents et inefficaces pour g√©rer un projet de la taille 
et de la complexit√© du noyau Linux. Ainsi, Torvalds a entrepris de cr√©er un outil qui soit rapide, distribu√© et capable 
de g√©rer efficacement les branches de d√©veloppement parall√®les.

Depuis lors, Git est devenu l'outil de contr√¥le de version de facto dans l'industrie du d√©veloppement logiciel. Sa 
flexibilit√©, sa rapidit√© et sa puissance en font un choix incontournable pour les √©quipes de d√©veloppement collaboratif.

> info "Installation"
> Si ce n'√©tait d√©j√† fait, reportez-vous √† la page suivante pour installer Git : [https://git-scm.com/downloads](https://git-scm.com/downloads){:target="_blank" rel="noopener noreferrer nofollow"}.

<hr class="hr-text" data-content="Concepts">

## Les Concepts Cl√©s de Git

Git repose sur plusieurs concepts cl√©s qui le rendent puissant et flexible. Comprendre ces concepts vous aidera √† 
mieux appr√©hender son fonctionnement et √† utiliser Git de mani√®re efficace.

### Le Commit

Le commit est l'√©l√©ment central de Git. Il enregistre un instantan√© complet des changements apport√©s √† votre code. Du 
point de vue de Git, l'historique de votre code est une succession de commits li√©s entre eux comme vous pouvez le voir 
dans cette repr√©sentation :

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/git-commits-basic.jpg --alt Liens entre commits de Git %}
  <figcaption>Repr√©sentation des enchainements de Commits.</figcaption>
</figure>

- Chaque commit fait r√©f√©rence au commit pr√©c√©dent.
- Il ne stocke que le delta par rapport au commit pr√©c√©dent.
- Ce delta peut √™tre les modifications d'un fichier, mais aussi l'ajout, le d√©placement ou la suppression d'un fichier.

Le commit est la partie visible de la structure de repr√©sentation interne de Git. Pour information, il existe d'autres 
objets qui servent √† stocker les changements dans le code, mais de notre point, en tant qu'utilisateur de Git, le commit 
est l'objet que nous manipulerons.

### Le Hash

- Lorsque vous effectuez un commit, Git cr√©e un identifiant unique pour ce commit, g√©n√©ralement appel√© "hash" ou "SHA".
- Ce hash est bas√© sur le contenu du commit, y compris les modifications apport√©es aux fichiers, l'auteur, le message de 
commit et d'autres m√©tadonn√©es.
- Il sert √† identifier de mani√®re univoque ce commit dans l'historique du projet.

Voici un exemple d'affichage de commits avec, en d√©but de ligne, leur hash respectif :

{% highlight output %}
8634ee6 (HEAD -> main, origin/main, origin/HEAD) feat: Adds dark theme üñ§ (#32)
aae8242 fix: CSS on phones
d9bb54f refacto: Big CSS uniformization and refacto üåü
4c77908 refacto: Tags, search results and animation on articles (#31)
fec3121 refacto: Adjusted image size, cropping, and resolution üì∫
cd6a213 fix: GitHub Actions error RPC failed; HTTP 408 curl 18 HTTP/2 (#29)
{% endhighlight %}

### Les Branches

Les commits de Git permettent donc de suivre l'historique de votre projet de mani√®re claire et structur√©e. Cependant, 
ils permettent aussi de travailler sur diff√©rentes lignes de d√©veloppement de mani√®re isol√©e. C'est ce qu'on appelle
les branches.

Regardons leur formalisation dans un historique de commits :

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/git-branches-basic.jpg --alt Commits formant des branches %}
  <figcaption>Commits formant 2 branches.</figcaption>
</figure>

- On constate que l'enchainement de ces commits forme 2 branches sur lesquelles il est possible de travailler √† plusieurs 
fonctionnalit√©s ou correctifs simultan√©ment.
- Nous verrons plus tard comment Git permet de r√©concilier ces branches gr√¢ce notamment aux commits.

> info "Bonne Pratique"
> L'utilisation de commits r√©guliers et significatifs est une pratique recommand√©e avec Git. Cela permet d'avoir un 
> historique clair, facilitant la collaboration, le d√©bogage et le suivi des modifications. Les commits constituent une 
> forme de documentation de l'√©volution de votre projet, aidant les d√©veloppeurs √† comprendre l'historique des changements
> et √† revenir √† des √©tats pr√©c√©dents si n√©cessaire.

### Les Diff√©rents Espaces

Dernier concept √† conna√Ætre, les espaces de Git. Un espace est une zone de travail sp√©cifique o√π Git stocke les 
diff√©rentes versions des fichiers de votre projet. Comprendre cette derni√®re notion va vous permettre de savoir quelle 
commande appliquer et dans quel cas, que ce soit pour g√©rer les modifications en cours, pr√©parer des commits ou naviguer
entre les diff√©rentes versions de votre code.

Voyons les 5 zones que g√®re Git :

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/git-concepts.jpg --alt Concepts cl√©s de Git %}
  <figcaption>Repr√©sentation des diff√©rents espaces de Git ainsi que des actions de quelques commandes</figcaption>
</figure>

1. La **Stash** ou la **Stash Area** :

   La stash area est une zone sp√©ciale o√π vous pourrez demander √† Git de stocker
temporairement des modifications de votre espace de travail. La stash area vous offre la flexibilit√© de passer √† une
autre branche, de travailler sur une autre t√¢che ou d'effectuer des tests sans avoir √† cr√©er de commit.

2. Le **Wokspace** ou l'**Espace de Travail** :

   L'espace de travail est le r√©pertoire o√π vous travaillez sur vos fichiers. Il contient les versions actuelles des 
fichiers et est modifi√© √† mesure que vous effectuez des changements dans votre code.

3. L'**Index** ou la **Staging Area** :

   L'index est un espace interm√©diaire entre l'espace de travail et les commits. Il fonctionne comme une zone de 
pr√©paration o√π vous s√©lectionnez les modifications sp√©cifiques √† inclure dans le prochain commit.

4. Le **Local Repository** :

   C'est votre r√©f√©rentiel local o√π Git stocke l'historique complet de votre projet, y compris tous les commits, les 
branches, les tags et les informations de configuration. Il s'agit de la copie locale de votre code source Git, sur 
laquelle vous travaillez et effectuez des op√©rations de versioning.

   L'utilisation du r√©f√©rentiel local vous permet d'effectuer des op√©rations de mani√®re autonome, sans avoir besoin 
d'une connexion r√©seau, avant de les synchroniser avec des r√©f√©rentiels distants si n√©cessaire.

5. Le **Remote Repository** :

   Le remote repr√©sente un r√©f√©rentiel distant o√π vous pouvez stocker votre code, comme un d√©p√¥t Git sur une plateforme 
d'h√©bergement telle que GitHub ou GitLab. Le remote est utilis√© pour faciliter la collaboration avec d'autres 
d√©veloppeurs et partager votre code et synchroniser les changements entre membres de l'√©quipe.

En comprenant ces concepts, vous serez en mesure de naviguer plus efficacement dans l'historique de votre projet, 
d'organiser votre travail avec les branches, de pr√©parer vos commits avec l'index et de collaborer avec d'autres 
d√©veloppeurs en utilisant les remotes.

<hr class="hr-text" data-content="Base">

## Les Commandes de Base de Git

Maintenant que nous comprenons les concepts de Git, plongeons dans les commandes de base qui vous permettront de 
g√©rer efficacement votre code source.

### Cr√©ation d'un D√©p√¥t Git avec `git init` ou `git clone`

- Premier cas de figure, votre projet n'est pas g√©r√© sous Git :

   Pour commencer √† utiliser Git dans votre projet, vous devez en initialiser un. Cela se fait en utilisant la commande
`git init` dans le r√©pertoire racine de votre projet. Par exemple :

{% highlight shell %}
cd /chemin/vers/mon_projet
git init
{% endhighlight %}

- Deuxi√®me cas de figure, votre projet se trouve d√©j√† dans un d√©p√¥t distant Git :

   La plupart du temps un d√©p√¥t distant existe d√©j√† et vous souhaitez le r√©cup√©rer en local. Il vous suffit de faire un 
`git clone <URL DE MON REPO>` pour le t√©l√©charger sur votre poste en local.

{% highlight shell %}
cd /chemin/vers/un_r√©pertoire
git clone https://github.com/progit/progit2.git
{% endhighlight %}

### Ajout de Fichiers avec la Commande `git add`

Une fois que vous avez initialis√© un d√©p√¥t Git, vous pouvez ajouter des fichiers √† l'index de Git en utilisant la 
commande `git add`. Cela permet √† Git de suivre les modifications de ces fichiers. Par exemple, pour ajouter tous les 
fichiers modifi√©s dans votre r√©pertoire de travail √† l'index, vous pouvez ex√©cuter la commande suivante :

{% highlight shell %}
git add .
{% endhighlight %}

### Enregistrement des Modifications avec `git commit`

Une fois que vous avez ajout√© les fichiers √† l'index, vous pouvez enregistrer les modifications en cr√©ant un commit √† 
l'aide de la commande `git commit`. Chaque commit repr√©sente un instantan√© de l'√©tat de votre projet √† un moment donn√©. 
Par exemple, pour cr√©er un commit avec un message descriptif, vous pouvez utiliser la commande suivante :

{% highlight shell %}
git commit -m "Ajout de la fonctionnalit√© ..."
{% endhighlight %}

### Utilisation de `git stash` pour Mettre de C√¥t√© des Modifications Temporaires

Parfois, vous pouvez avoir des modifications non termin√©es dans votre espace de travail, mais vous devez rapidement 
passer √† une autre t√¢che ou √† une autre branche. Dans de tels cas, vous pouvez utiliser la commande `git stash` pour 
mettre de c√¥t√© temporairement vos modifications. Par exemple :

{% highlight shell %}
git stash
{% endhighlight %}

L'exemple ci-dessus met de c√¥t√© vos modifications dans la zone temporaire appel√© stash. Une fois vos modifications 
"mises de c√¥t√©", vous pouvez passer √† une autre t√¢che ou changer de branche.

Maintenant, supposons que vous avez termin√© cette t√¢che et que vous souhaitez 
reprendre vos modifications "mises de c√¥t√©". Vous pouvez les appliquer dans votre r√©pertoire de travail en utilisant la 
commande `git stash pop`. Cette commande applique automatiquement la derni√®re stash et la supprime de la liste des 
stashes. Par exemple :

{% highlight shell %}
git stash pop
{% endhighlight %}

Cette commande applique la derni√®re stash et restaure vos modifications dans votre r√©pertoire de travail. Vous pouvez 
maintenant continuer √† travailler sur vos anciennes modifications.

L'utilisation de `git stash` et `git stash pop` vous permet de mettre de c√¥t√© temporairement vos modifications en cours,
puis de les r√©appliquer facilement lorsque vous √™tes pr√™t √† y revenir. Cela vous offre une flexibilit√© pr√©cieuse lors de
la gestion de vos t√¢ches et de vos branches de d√©veloppement.

## La Gestion des Branches et des Fusions

L'une des fonctionnalit√©s puissantes de Git est sa capacit√© √† g√©rer des branches de d√©veloppement parall√®les. La gestion
des branches et des fusions est une comp√©tence cl√© √† acqu√©rir pour un d√©veloppement efficace.

Voyons comment Git facilite cette gestion.

> warning "Spoiler Alert"
> A la fin de cet article, je vous recommande un superbe outil pour vous exercer aux commandes Git tout en visualisant 
> les actions sur les branches et commits. Les copies d'√©cran suivantes sont justement r√©alis√©es avec cet outil
> [https://learngitbranching.js.org/](https://learngitbranching.js.org/){:target="_blank" rel="noopener noreferrer nofollow"}.

### Cr√©ation de Branches avec `git branch` et `git checkout`

- Vous pouvez cr√©er une nouvelle branche dans votre d√©p√¥t Git en utilisant la commande `git branch`. Par exemple, pour 
cr√©er une branche nomm√©e "feat/new-functionality", vous pouvez ex√©cuter :

{% highlight shell %}
git branch feat/new-functionality
{% endhighlight %}

  Pour vous d√©placer vers cette nouvelle branche, vous utiliserez la commande `git checkout`. Par exemple :

{% highlight shell %}
git checkout feat/new-functionality
{% endhighlight %}

   Vous √™tes maintenant sur la branche "feature/nouvelle-fonctionnalite" et vous pouvez commencer √† effectuer des 
   modifications sp√©cifiques √† cette fonctionnalit√©.

- Une autre mani√®re plus rapide serait d'entrer la commande `git checkout -b` qui cr√©e la branche et vous place 
directement dessus apr√®s l'avoir cr√©√©e :

{% highlight shell %}
git checkout -b feat/new-functionality
{% endhighlight %}

### Fusion de branches avec `git merge`

Lorsque vous avez termin√© de d√©velopper une fonctionnalit√© ou de corriger un bogue dans une branche, il est temps de 
fusionner ces modifications avec une autre branche, souvent la branche principale (par exemple, `main` ou `master`). 
C'est l√† que la commande `git merge` intervient.

Pour fusionner une branche dans une autre, vous pouvez ex√©cuter la commande `git merge` en sp√©cifiant la branche que 
vous souhaitez fusionner. Par exemple, pour fusionner la branche "feature/nouvelle-fonctionnalite" dans la branche 
principale, vous pouvez utiliser la commande suivante :

{% highlight shell %}
git checkout main
git merge feature/nouvelle-fonctionnalite
{% endhighlight %}

Git tentera automatiquement de fusionner les modifications de la branche sp√©cifi√©e dans la branche actuelle. Si des 
conflits surviennent, Git vous informera et vous devrez r√©soudre ces conflits manuellement.

### R√©solution de conflits de fusion

Lorsqu'il y a des conflits entre les modifications apport√©es dans les branches √† fusionner, Git ne peut pas r√©soudre 
automatiquement ces conflits. Dans ce cas, vous devrez r√©soudre les conflits manuellement.

Git marquera les zones en conflit dans les fichiers concern√©s, vous permettant de voir les diff√©rences et de choisir les
modifications √† conserver. Une fois que vous avez r√©solu les conflits, vous devez ajouter les fichiers modifi√©s √† 
l'index en utilisant `git add`, puis effectuer un commit pour finaliser la fusion.

### Suppression des branches fusionn√©es

Apr√®s avoir fusionn√© une branche et v√©rifi√© que les modifications ont √©t√© int√©gr√©es avec succ√®s, vous pouvez supprimer 
la branche fusionn√©e pour garder votre historique de projet propre.

Pour supprimer une branche fusionn√©e, vous pouvez utiliser la commande `git branch` avec l'option `-d` suivie du nom de 
la branche. Par exemple, pour supprimer la branche "feature/nouvelle-fonctionnalite" apr√®s sa fusion, vous pouvez 
ex√©cuter :

{% highlight shell %}
git branch -d feature/nouvelle-fonctionnalite
{% endhighlight %}

### Ex√©cution de `git cherry-pick` pour Appliquer des Commits Sp√©cifiques

Parfois, vous pouvez avoir besoin d'appliquer uniquement certains commits d'une branche √† une autre. Dans de tels cas, 
vous pouvez utiliser la commande `git cherry-pick`. Par exemple, pour appliquer le commit avec le hash "abcdef" √† 
la branche actuelle, vous pouvez ex√©cuter :

{% highlight shell %}
git cherry-pick abcdef
{% endhighlight %}

Cela appliquera le commit sp√©cifi√© √† la branche actuelle, cr√©ant ainsi une copie du commit sur cette branche :

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/git-cherry-pick.jpg --alt Cherry-pick de C2 %}
  <figcaption>Cherry-pick du commit C2 de la branche feature vers la branche bugfix.</figcaption>
</figure>

### R√©initialisation d'une Branche avec `git reset`

Si vous avez besoin de revenir √† un √©tat pr√©c√©dent de votre branche, vous pouvez utiliser la commande `git reset`. Par 
exemple, pour r√©initialiser la branche actuelle √† un commit sp√©cifique, vous pouvez ex√©cuter :

{% highlight shell %}
git reset <commit>
{% endhighlight %}

Cela ram√®nera votre branche √† l'√©tat du commit sp√©cifi√©, en annulant tous les commits ult√©rieurs (notez bien que le 
commit n'est pas supprim√©) :

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/git-reset.jpg --alt Reset de C3 %}
  <figcaption>Reset du commit C3 de la branche feature</figcaption>
</figure>

### Annulation de Modifications avec `git revert`

Si vous souhaitez annuler un ou plusieurs commits sp√©cifiques tout en conservant une trace de cette annulation dans 
l'historique, vous pouvez utiliser la commande `git revert`. Par exemple, pour annuler le dernier commit, vous pouvez 
ex√©cuter :

{% highlight shell %}
git revert HEAD
{% endhighlight %}

Cela cr√©era un nouveau commit qui annule les modifications apport√©es par le commit pr√©c√©dent :

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/git-revert.jpg --alt Revert du commit C3 %}
  <figcaption>Revert du commit C3 ce qui cr√©e un nouveau commit C3'</figcaption>
</figure>

La gestion des branches est une fonctionnalit√© cl√© de Git, vous permettant de travailler efficacement sur diff√©rentes 
fonctionnalit√©s ou correctifs en parall√®le. Les commandes `git branch`, `git checkout`, `git cherry-pick`, `git reset` 
et `git revert` vous offrent la flexibilit√© n√©cessaire pour g√©rer les branches et les modifications de mani√®re optimale.

## Le Rebasage et la Relecture de l'Historique

Le rebasage (rebase en anglais) est une fonctionnalit√© avanc√©e de Git qui permet de modifier l'historique des commits. 
Dans cette partie, nous explorerons le rebasage ainsi que d'autres commandes utiles pour examiner et naviguer dans 
l'historique de votre d√©p√¥t.

### Compr√©hension du Rebase et son Utilisation avec `git rebase`

Le rebasage vous permet de r√©organiser les commits de votre branche pour les replacer sur une autre branche ou pour les 
r√©organiser de mani√®re lin√©aire. Cela peut √™tre utile pour garder un historique de commits propre et facile √† suivre. 
Pour effectuer un rebasage interactif, utilisez la commande `git rebase -i`. Par exemple :

{% highlight shell %}
git rebase -i <branche-de-destination>
{% endhighlight %}

Cette commande ouvrira un √©diteur avec une liste des commits que vous pouvez r√©organiser ou modifier selon vos besoins :

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/git-rebase.jpg --alt Rebase pour intervertir C3 et C4 %}
  <figcaption>Rebase pour intervertir C3 et C4 de la branche feature</figcaption>
</figure>

### Exploration de l'Historique des Commits avec `git log`

- La commande `git log` vous permet d'examiner l'historique des commits de votre d√©p√¥t. Par d√©faut, elle affiche les 
informations essentielles comme l'auteur, la date et le message du commit. Par exemple :

{% highlight output %}
$ git log

commit 8634ee6a55086f6cf4ff7fa0ee4bbceb283d7c2c (HEAD -> main, origin/main, origin/HEAD)
Author: Jean-Jerome Levy <jeanjerome@users.noreply.github.com>
Date:   Thu May 25 23:54:03 2023 +0200

    feat: Adds dark theme üñ§ (#32)

commit aae82424db11ad31a6aba2cb0c27a264e177b9a1
Author: Jean-Jerome Levy <jeanjerome@users.noreply.github.com>
Date:   Wed May 24 20:41:20 2023 +0200

    fix: CSS on phones

commit d9bb54f71bd3bf609cfd6ccfcfdd8df14bf5f06b
Author: Jean-Jerome Levy <jeanjerome@users.noreply.github.com>
Date:   Tue May 23 22:59:36 2023 +0200

    refacto: Big CSS uniformization and refacto üåü
...
{% endhighlight %}

  Cette commande affiche une liste d√©taill√©e de tous les commits, du plus r√©cent au plus ancien, vous permettant ainsi de 
suivre l'√©volution de votre code.

- Il est possible de formater l'affichage des logs afin de n'afficher que ce qui nous int√©resse. Pour avoir par exemple
un affichage compact, entrez `git log --oneline` :

{% highlight output %}
$ git log --oneline

8634ee6 feat: Adds dark theme üñ§ (#32)
aae8242 fix: CSS on phones
d9bb54f refacto: Big CSS uniformization and refacto üåü
...
{% endhighlight %}

> info "git et vi"
> Git utilise `vi` pour interagir avec l'utilisateur. Pensez aux commandes :
> - `ESC : q` pour sortir,
> - `ESC : i` pour √©diter,
> - `ESC : x` pour quitter en enregistrant,
> - `ESC : s/x/y/g` pour remplacer tous les x par des y,...

### Utilisation du Pointeur `HEAD` pour se D√©placer dans l'Historique

Le pointeur `HEAD` est un pointeur sp√©cial qui fait r√©f√©rence au commit actuel dans votre d√©p√¥t. Vous pouvez l'utiliser 
pour vous d√©placer dans l'historique des commits. Par exemple, pour afficher les d√©tails du commit actuel, vous pouvez 
ex√©cuter :

{% highlight output %}
$ git show HEAD

commit 8634ee6a55086f6cf4ff7fa0ee4bbceb283d7c2c
Author: Jean-Jerome Levy <jeanjerome@users.noreply.github.com>
Date:   Thu May 25 23:54:03 2023 +0200

    feat: Adds dark theme üñ§ (#32)

diff --git a/_includes/head.html b/_includes/head.html
index bf20ecf..2c3823d 100755
--- a/_includes/head.html
+++ b/_includes/head.html
@@ -109,6 +109,9 @@
font-display: swap;
src: url("/assets/fonts/nunito-regular.woff2") format("woff2");
}
-    </style>
+  </style>
+  <script>
+      localStorage.getItem('darkMode') === 'true' && document.documentElement.setAttribute('data-mode', 'dark');
+  </script>
...
{% endhighlight %}

Cette commande affichera les informations d√©taill√©es du commit actuel, y compris les modifications apport√©es.

### Les Op√©rateurs Sp√©ciaux `^` et `~` pour R√©f√©rencer des Commits Sp√©cifiques

Les op√©rateurs `^` et `~` vous permettent de r√©f√©rencer des commits sp√©cifiques en utilisant des notations relatives. 

Par exemple, 
- `^` fait r√©f√©rence au commit parent (le pr√©c√©dent),
- `~` fait r√©f√©rence au commit pr√©c√©dent le parent (l'avant-dernier).

Par exemple, pour afficher les d√©tails du commit parent direct du commit actuel, vous pouvez utiliser :

{% highlight shell %}
git show HEAD^
{% endhighlight %}

Ces op√©rateurs sont utiles pour naviguer rapidement dans l'historique des commits sans avoir √† conna√Ætre leurs 
identifiants pr√©cis.

Le rebasage et la relecture de l'historique sont des fonctionnalit√©s avanc√©es de Git qui vous permettent de g√©rer et de 
structurer votre historique de commits de mani√®re efficace. Les commandes `git rebase`, `git log`, `HEAD^` et `HEAD~` 
vous offrent les outils n√©cessaires pour explorer, manipuler et comprendre l'historique de votre d√©p√¥t Git.

## Le Contr√¥le des Versions avec Git

L'un des aspects fondamentaux de Git est son syst√®me de contr√¥le de version, qui vous permet de g√©rer les diff√©rentes 
versions de votre projet de mani√®re efficace. Dans cette partie, nous explorerons les commandes pour comparer les 
diff√©rences entre les versions, r√©cup√©rer des versions ant√©rieures et g√©rer les branches distantes.

### Comparaison des Diff√©rences avec `git diff`

La commande `git diff` vous permet de visualiser les diff√©rences entre les versions du code source. Par exemple, pour 
afficher les modifications entre l'√©tat actuel et le dernier commit, vous pouvez ex√©cuter :

{% highlight output %}
$ git diff HEAD

diff --git a/_posts/2023-05-28-tuto-git.markdown b/_posts/2023-05-28-tuto-git.markdown
new file mode 100644
index 0000000..22b5ca1
--- /dev/null
+++ b/_posts/2023-05-28-tuto-git.markdown
@@ -0,0 +1,509 @@
+---
+layout: post
+title: "Guide Complet de Git : Ma√Ætrisez ses Commandes Essentielles"
{% endhighlight %}

Cette commande affiche les lignes modifi√©es, ajout√©es ou supprim√©es entre les deux versions. Ici, elle m'indique que 
j'ai ajout√© un nouveau fichier et me donne son contenu.

### R√©cup√©ration des Versions Ant√©rieures avec `git checkout`

Si vous avez besoin de revenir √† une version ant√©rieure de votre projet, vous pouvez utiliser la commande `git checkout`
.

Par exemple, pour revenir √† un commit sp√©cifique avec l'identifiant "abcdef", vous pouvez ex√©cuter :

{% highlight shell %}
git checkout abcdef
{% endhighlight %}

Cela mettra votre r√©pertoire de travail dans l'√©tat de ce commit, vous permettant de travailler avec cette version 
sp√©cifique.

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/git-checkout.jpg --alt Checkout vers main pour cr√©er un branche bugfix %}
  <figcaption>Checkout sur main pour pouvoir cr√©er un branche bugfix</figcaption>
</figure>

### Gestion des Branches Distantes avec `git push` et `git pull`

Git vous permet de travailler avec des d√©p√¥ts distants, tels que ceux h√©berg√©s sur des plateformes comme GitHub ou 
GitLab. Pour pousser vos modifications locales vers un d√©p√¥t distant, utilisez la commande `git push`. Par exemple :

{% highlight shell %}
git push origin feat/my-feature
{% endhighlight %}

Cette commande envoie les modifications de votre branche locale vers la branche correspondante sur le d√©p√¥t distant.

Pour r√©cup√©rer les modifications effectu√©es sur le d√©p√¥t distant et les fusionner dans votre branche locale, utilisez la
commande `git pull`. Par exemple :

{% highlight shell %}
git pull origin bugfix/the-fix
{% endhighlight %}

Cette commande r√©cup√®re les modifications de la branche correspondante sur le d√©p√¥t distant et les fusionne 
automatiquement dans votre branche locale.

Ces commandes vous permettent de synchroniser votre d√©p√¥t local avec les d√©p√¥ts distants, facilitant ainsi le travail 
collaboratif et le suivi des versions.

## Sc√©narios avanc√©s de manipulation de l'historique avec Git

Dans ce tutoriel, notre objectif principal est de vous apprendre √† g√©rer les cas que nous allons aborder dans ce 
chapitre. Vous allez appliquer les notions que nous venons d'explorer pour manipuler l'historique des commits et 
r√©soudre des probl√®mes complexes auxquels tout d√©veloppeur est confront√© dans ses projets.

En acqu√©rant ces comp√©tences, vous deviendrez un d√©veloppeur exp√©riment√©, vous d√©marquant de ceux qui se contentent des 
commandes basiques de Git.

### Comment r√©√©crire plusieurs commits en un seul ?

Pour r√©√©crire plusieurs commits en un seul, vous pouvez utiliser la commande `git rebase -i <commit>` o√π `<commit>` est 
le commit pr√©c√©dent √† ceux que vous souhaitez r√©√©crire.

Voici les √©tapes √† suivre :

1. Tout d'abord, utilisez la commande `git log --oneline` pour identifier le nombre de commits que vous souhaitez 
r√©√©crire en un seul en comptant le dernier commit.

2. Une fois ce nombre identifi√©, proc√©der au rebase. Par exemple, si vous voulez r√©√©crire les trois derniers commits, 
utilisez `git rebase -i HEAD~3`. Cela ouvrira l'√©diteur de texte par d√©faut avec une liste des commits √† r√©√©crire.

2. Dans l'√©diteur de texte, remplacez le mot `pick` (ou `p`) par `squash` ou simplement `s` pour les 
commits que vous souhaitez fusionner en un seul. Par exemple, si vous avez trois commits et que vous souhaitez les 
r√©√©crire en un seul, vous modifierez les deuxi√®me et troisi√®me commits en utilisant `squash` ou `s`. L√† encore, la 
connaissance des commandes vi pourra vous faciliter la t√¢che: `ESC : s/p/s/g`

3. Enregistrez et fermez l'√©diteur de texte (via la commande de vi `ESC : x`). Une autre fen√™tre d'√©diteur s'ouvrira 
pour vous permettre de modifier le message du commit final. Vous pouvez conserver le message du premier commit ou le 
modifier selon vos besoins.

4. Enregistrez et fermez √©galement cette fen√™tre d'√©diteur. Git effectuera alors le rebase et fusionnera les commits 
s√©lectionn√©s en un seul commit.

Assurez-vous de comprendre les implications du rebase, car il modifie l'historique des commits. Si vous avez d√©j√† pouss√©
ces commits vers un r√©f√©rentiel distant, vous devrez effectuer une `git push --force` pour mettre √† jour le r√©f√©rentiel 
distant avec le nouvel historique r√©√©crit.

Notez que la r√©√©criture d'un historique partag√© peut avoir des cons√©quences pour les autres d√©veloppeurs
travaillant sur le m√™me projet.

> warning "Attention"
> - Il est important de communiquer avec votre √©quipe et de suivre les meilleures 
> pratiques de collaboration lors de la r√©√©criture des commits.
> - En g√©n√©ral, il est recommand√© de proc√©der de la sorte lorsqu'on travaille seul, sur sa branche.

### Modifier le message d'un commit

Il peut arriver que vous committiez un message incorrect, incomplet ou mal format√©. Dans de tels cas, Git offre une 
solution simple pour modifier le message d'un commit pr√©c√©dent. Voici comment proc√©der.

#### Modifier le message du dernier commit

1. Utilisez la commande `git commit --amend` suivi de l'option `-m` et du nouveau message que vous souhaitez utiliser :

{% highlight shell %}
git commit --amend -m "Nouveau message du commit"
{% endhighlight %}
  
  Cela modifiera le message du dernier commit en utilisant le nouveau message sp√©cifi√©.

#### Modifier le message d'un commit plus ancien

1. Si vous souhaitez modifier le message d'un commit plus ancien, vous pouvez utiliser la commande 
`git rebase -i <commit>` o√π `<commit>` est le commit pr√©c√©dent celui que vous voulez modifier. 

{% highlight shell %}
git rebase -i HEAD~3
{% endhighlight %}

2. Dans l'√©diteur de texte qui s'ouvre, remplacez "pick" par "reword" ou simplement "r" devant le commit dont vous 
souhaitez modifier le message. Cela ouvrira l'√©diteur de texte avec une liste des commits. Modifiez le mot "pick" en 
"reword" ou "r" devant le commit appropri√©, puis enregistrez et fermez l'√©diteur.

3. Une fois que vous avez modifi√© le message du commit, enregistrez les modifications et fermez l'√©diteur. Git 
effectuera alors le rebase et vous permettra de modifier le message du commit s√©lectionn√©.

Il est important de noter que si vous avez d√©j√† pouss√© le commit dont vous modifiez le message, vers un r√©f√©rentiel 
distant, vous devrez effectuer un `git push --force` pour mettre √† jour le r√©f√©rentiel distant avec le nouveau message.

La possibilit√© de modifier le message d'un commit pr√©c√©dent vous permet de corriger les erreurs ou d'am√©liorer la clart√©
des messages pour un historique de commits plus pr√©cis et informatif.

> warning "Attention"
> - Assurez-vous de communiquer avec les autres d√©veloppeurs travaillant sur le m√™me projet, car cela peut affecter leur 
> historique de commits.
> - En g√©n√©ral, il est recommand√© de proc√©der de la sorte lorsqu'on travaille seul, sur sa branche.

### Modifier les fichiers d'un commit pr√©c√©dent

Il peut arriver que vous ayez besoin de modifier les fichiers d'un commit pr√©c√©dent dans Git. Cela peut √™tre d√ª √† une 
erreur de contenu, √† l'oubli de certains fichiers ou √† d'autres raisons n√©cessitant des modifications r√©troactives. 
Bien que Git encourage √† pr√©server l'int√©grit√© de l'historique des commits, il existe des m√©thodes pour apporter des 
modifications √† des commits pass√©s.

Voici quelques √©tapes pour modifier les fichiers d'un commit pr√©c√©dent :

1. Utilisez la commande `git rebase -i <commit>` o√π `<commit>` est le commit pr√©c√©dent auquel vous souhaitez apporter 
des modifications. Cela ouvrira l'√©diteur de texte avec la liste des commits dans l'ordre chronologique inverse.

2. Localisez le commit que vous souhaitez modifier et remplacez le mot "pick" devant ce commit par "edit". Enregistrez 
les modifications et fermez l'√©diteur.

3. Git effectuera alors le rebase et mettra en pause le processus apr√®s avoir appliqu√© le commit que vous souhaitez 
modifier.

4. Utilisez la commande `git checkout <commit> -- <fichier>` pour extraire la version du fichier sp√©cifique √† modifier 
du commit pr√©c√©dent.
  Par exemple, `git checkout HEAD~1 -- fichier.txt` extrait la version de `fichier.txt` du commit pr√©c√©dent.

5. Modifiez le fichier selon vos besoins en effectuant les changements n√©cessaires.

6. Une fois les modifications apport√©es, utilisez la commande `git add <fichier>` pour mettre √† jour les modifications 
dans l'index de Git.

7. Utilisez la commande `git commit --amend` pour cr√©er un nouveau commit avec les modifications apport√©es. Vous pouvez 
modifier le message de commit si n√©cessaire.

8. R√©p√©tez les √©tapes 4 √† 7 pour chaque fichier que vous souhaitez modifier dans ce commit.

9. Lorsque vous avez termin√© de modifier les fichiers, utilisez la commande `git rebase --continue` pour poursuivre le 
rebase et appliquer les modifications.

Il est important de noter que si vous avez d√©j√† pouss√© le commit dont vous modifiez les fichiers vers un r√©f√©rentiel 
distant, vous devrez effectuer une force-pouss√©e (`git push --force`) pour mettre √† jour le r√©f√©rentiel distant avec les
modifications.

La possibilit√© de modifier les fichiers d'un commit pr√©c√©dent vous permet de corriger des erreurs ou d'apporter des 
modifications r√©troactives lorsque cela est n√©cessaire. Cependant, soyez prudent lors de la modification de l'historique
des commits, car cela peut entra√Æner des incoh√©rences et des conflits s'il est mal utilis√©.

> warning "Attention"
> - Assurez-vous de communiquer avec les autres d√©veloppeurs travaillant sur le m√™me projet, car cela peut affecter leur
> historique de commits.
> - En g√©n√©ral, il est recommand√© de proc√©der de la sorte lorsqu'on travaille seul, sur sa branche.


## Conclusion

Nous avons parcouru les concepts essentiels de Git et explor√© un ensemble de commandes cl√©s pour vous aider √† ma√Ætriser 
cet outil puissant. En comprenant les commits, les espaces de travail, l'index, la stash et les r√©f√©rentiels local et 
distant, vous √™tes maintenant pr√™t √† optimiser votre travail et √† tirer le meilleur parti de Git.

Si vous souhaitez approfondir vos connaissances sur Git, je vous recommande de consulter les ressources suivantes :

- [Official Git Documentation](https://git-scm.com/doc){:target="_blank" rel="noopener noreferrer nofollow"} : La documentation officielle de Git, traduite en plusieurs 
langues, est une source fiable, compl√®te et tr√®s claire pour en apprendre davantage sur les fonctionnalit√©s avanc√©es 
de Git.

- [Learn Git Branching](https://learngitbranching.js.org/){:target="_blank" rel="noopener noreferrer nofollow"} : Une application web, dont le code est disponible sur GitHub,
qui propose des tutoriels interactifs et qui permettent de visualiser l'action d'une commande sur les branches et les 
commits de votre Git. Je vous recommande d'aller y tester vos nouvelles connaissances.

En explorant ces ressources suppl√©mentaires et en continuant √† pratiquer, vous pourrez approfondir votre compr√©hension 
de Git et devenir un expert.
