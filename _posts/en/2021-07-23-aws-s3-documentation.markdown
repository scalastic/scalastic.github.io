---
layout: post
title: Amazon S3
date: 2021-07-23 15:33:00 +0200
description: Amazon S3 (Simple Storage Service) Fundamentals and Key Concepts to Know. Tutorial, how-to.
img: aws-s3-documentation.jpg
fig-caption: Photo by <a href="https://unsplash.com/@lceusebio?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Luís Eusébio</a> on <a href="https://unsplash.com/s/photos/simple?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
tags: [AWS, S3, Documentation]
lang: en
permalink: /aws-amazon-s3/
status: finished
---

Amazon Simple Storage Service (Amazon S3) is a storage for the Internet. You can use Amazon S3 to store and recover any amount of data at any time, anywhere on the web.

Its scale is almost infinite, a considerable number of websites use Amazon S3 as well as many AWS services. Therefore, it is an essential component of AWS.

<hr class="hr-text" data-content="Content">

* TOC
{:toc}

<hr class="hr-text" data-content="Buckets-Objects">

## Buckets et Objects

In Amazon S3, objects (files) are stored in buckets (directories)

### Bucket

- A Bucket must have a unique name at the global level of the AWS network even if it is defined at the Region level
- It follows a naming convention:
  * No uppercase letter
  * No underscore
  * No IP
  * And starts with a lowercase letter or a number

### Object

- As a file content
- It has a maximum size of 5 TB (as a 5 GB multi-parts)
- You can attach meta-data, tags and a version ID to it
  
- Objects are accessible by their Key
- A Key is composed of a prefix and the object name:
  * Prefix: **company/department/**
  * Object Name: **users.json**
  * Key: **company/department/users.json**
- For a Bucket named **referential**, the object will be accessed via the URL:
  * **s3://referential/company/department/users.json**

Even if there is no notion of directory in S3, we see that the naming of Prefix with `/``s allows to simulate a tree structure.

<hr class="hr-text" data-content="Versionning">

## Versionning

To implement the version management of objects, you must first enable the versioning at the Bucket level.

- Version number is generated by Amazon S3
- The removal of an object is then soft-delete and the object will be marked with a **delete marker**. It will no longer be displayed in the list of objects but it will still exist with its different versions.

<hr class="hr-text" data-content="Encryption">

## Encryption

There are 4 methods of encrypting objects in S3:
- **SSE-S3**: 
  * Key managed by AWS
  * Server Side Encryption (SSE)
  * Algorithm **AES-256**
  * Activates by passing the Header **"x-amz-server-side-encryption":"AES256"** when uploading the object
  * Can use HTTP or HTTPS
- **SSE-KMS**:
  * Uses KMS (Key Management Service) to manage the key
  * Server Side Encryption (SSE)
  * Activates by passing the Header **"x-amz-server-side-encryption":"aws:kms"** when uploading the object
  * Uses the **Customer Master Key** defined in KMS for encryption
  * Can use HTTP or HTTPS
- **SSE-C**: 
  * Allows you to provide your own key (but it is up to you to store it)
  * Server Side Encryption (SSE) but the key is not stored in AWS!
  * Activates by passing the key in the Header when uploading the object but also when reading it
  * Uses only HTTPS protocol (to protect key)
- **Client-rated encryption**:
  * Encryption of objects is the responsibility of the Client
  * Side Encryption Client (CSE)
  * Encryption / decryption is done on the Client side


**Encryption In Transit** only encrypts an object in SSL/TLS when it is transferred to/from AWS. He doesn’t encrypt the object in its bucket.

<hr class="hr-text" data-content="Security">

## Security

Access to S3 is managed at different levels:

- User:
  * **IAM Policy**: Defines the calls allowed to S3 APIs for each IAM user
- Resource:
  * **Bucket Policy**:
    - **S3 Bucket Policy**:
      * Configuration in JSON format
      * Allows you to configure a public access to a Bucket, to force the encryption of objects or to give access to another account (Cross-Account)
    - **Block Public Access**:
      * Blocks public access to a Bucket
      * Prevents leakage of data stored in a Bucket
  * **Object Access Control List**: ACL for each object
  * **Bucket Access Control List**: ACL at each bucket level

### Others

- **Networking**:
  * Supports VPC Endpoints (EC2 instances without Internet access)
- **Logging and Audit**:
  * S3 access logs can be stored in another Buket S3
  * Calls to S3 APIs can be logged into AWS CloudTrail
- **User Security**:
  * **MFA for deletion**: A MFA token may be required to delete an object in a versioned bucket
  * **Pre-signed URL**: URL, valid for a limited time, that allows access to an object in S3

<hr class="hr-text" data-content="Website">

## S3 Website

- S3 can host websites' static content
- The bucket must be activated in this way
- The access URL is of the form:
  * `<bucket>.s3-website.<region>.amazonaws.com`
  * `<bucket>.s3-website-<region>.amazonaws.com`

### S3 CORS (Cross-Origin Resource Sharing )

- A website that refers to resources on a S3 Bucket may need to configure a **Header CORS**
- The bucket’s DNS name must be autorized in the HTTP Header **Access-Control-Allow-Origin**
