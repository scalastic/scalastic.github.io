---
layout: post
title: Installez Kubernetes, Prometheus et Grafana en local
date: 2021-04-13 17:51:20 +0200
description: Comment installer Kubernetes, Prometheus et Grafana sur macOS localement avec Docker Desktop
img: install-kubernetes.jpg 
fig-caption: Photo de <a href="https://unsplash.com/@safesolvent?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Martin Reisch</a> sur <a href="https://unsplash.com/s/photos/square-pattern?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
tags: [Kubernetes, Docker, Prometheus, Grafana, macOS]
lang: fr
permalink: /install-kubernetes-prometheus-grafana/
status: finished
---

Parfois, il peut √™tre utile pour les d√©veloppeurs d‚Äôavoir des outils de monitoring efficaces, install√©s sur son cluster local Kubernetes. Le choix √©vident serait d‚Äôaller vers Prometheus et Grafana, deux outils tr√®s reconnus.

Et c‚Äôest l√† que les ennuis commencent.

Dans cet article, je vais vous montrer comment installer avec succ√®s une plate-forme Kubernetes compl√®te, sur votre machine locale, en particulier sur macOS.

> info "Code source"
> Tous les scripts sont conserv√©s dans [https://github.com/scalastic/local-k8s-installation](https://github.com/scalastic/local-k8s-installation){:target="_blank" rel="noopener noreferrer nofollow"}


<hr class="hr-text" data-content="Table">

* TOC
{:toc}

<hr class="hr-text" data-content="Notice">

## Notice

- Cette proc√©dure est destin√©e √† fonctionner sur **macOS** mais devrait aussi fonctionner sur n‚Äôimporte quel autre h√¥te. Cependant, je n‚Äôai pas √©t√© en mesure de le tester. 
- Les probl√©matiques sont plus li√©es √† la distribution Kubernetes (**Docker Desktop**) qu'√† l‚ÄôOS lui-m√™me.

<hr class="hr-text" data-content="Kubernetes">

## Kubernetes

- Nous utiliserons **Docker Desktop** qui est livr√© avec un cluster Kubernetes pr√™t √† l‚Äôemploi.

1. T√©l√©chargez l‚Äôinstallateur √† [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop){:target="_blank" rel="noopener noreferrer nofollow"} et suivez les instructions.

2. Une fois install√©, activez kubernetes dans le volet ***Pr√©f√©rences*** / ***Kubernetes*** / ***Activer Kubernetes***.

3. Vous devriez maintenant voir tous les composants **Docker Desktop** dans le volet ***About*** inclus Kubernetes:
<figure class="article">
  {% picture {{site.baseurl}}/assets/img/docker-desktop.png --alt L'interface de Docker Desktop avec la version de ses composants %}
  <figcaption>L'interface de Docker Desktop avec la version de ses composants</figcaption>
</figure>

- Collectez les informations de base de votre cluster pour v√©rifier que tout fonctionne bien :
{% highlight Zsh %}
% kubectl cluster-info
{% endhighlight %}


{% highlight Zsh %}
% kubectl get nodes
{% endhighlight %}

- Ou m√™me:
  
{% highlight Zsh %}
% kubectl get all -A
{% endhighlight %}

> info "Le param√®tre -A"
> 
> Depuis Kube `1.14`, nous n‚Äôavons plus besoin d‚Äôutiliser les `--all-namespaces` ! Alors ne le faites plus...


<hr class="hr-text" data-content="Dashboard">

## Dashboard

**Dashboard** est une interface utilisateur web de l'API k8s et fournit un moyen facile de visualiser et d√©boguer les objets kube. Vous pouvez en savoir plus sur **Dashboard** √† l'adresse [https://github.com/kubernetes/dashboard](https://github.com/kubernetes/dashboard){:target="_blank¬†¬ª rel="noopener noreferrer nofollow"}


Par d√©faut, **Dashboard** est prot√©g√© par un jeton, et chaque fois que vous y acc√©derez, il vous sera demand√© d‚Äôen fournir un. Cela peut  
vraiment √™tre ennuyeux √† long terme. Heureusement, **Dashboard** vous permet de contourner la page de connexion en ajoutant `--enable-skip-login` √† la 
configuration.

> info "Note"
> Le fichier de configuration fourni est patch√© avec cette instruction ([ligne 198](https://github.com/scalastic/local-k8s-installation/blob/7b0857d64475a1b4c0d1f3680f8d48f076211de8/k8s/dashboard-v2.2.0-recommended.yaml#L198){:target="_blank" rel="noopener noreferrer nofollow"})


Pour d√©ployer **Dashboard** - sans authentification - ex√©cutez la commande suivante :

{% highlight Zsh %}
% kubectl apply -f ./k8s/dashboard-v2.2.0-recommended.yaml
{% endhighlight %}

Acc√©dez ensuite √† votre tableau de bord depuis votre poste de travail local en cr√©ant un canal s√©curis√© vers votre cluster Kubernetes. Pour faire 
donc, ex√©cuter la commande suivante:


{% highlight Zsh %}
% kubectl proxy
{% endhighlight %}

L'adresse est √† pr√©sent:

<a href="http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/" rel="noopener noreferrer nofollow" target="_blank" data-proofer-ignore>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</a>


> info "Conseils"
> Je sais alors n‚Äôoubliez pas d'enregistrer l‚ÄôURL!

Vous verrez d‚Äôabord cette page de connexion :

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/dashboard-first-access.jpg --alt Ecran de login du Dashboard %}
  <figcaption>Ecran de login du Dashboard</figcaption>
</figure>

Il suffit d‚Äôappuyer sur le bouton ***skip*** pour contourner l‚Äôauthentification.

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/dashboard-index.jpg --alt Page principale de Dashboard %}
  <figcaption>Page principale de Dashboard</figcaption>
</figure>

<hr class="hr-text" data-content="Metrics-Server">

## Metrics Server

**Metrics-Server** est utilis√© pour extraire les mesures des composants k8s et les expose √† l‚ÄôAPI k8s. Le repo officiel est [https://github.com/kubernetes-sigs/metrics-server](https://github.com/kubernetes-sigs/metrics-server){:target="_blank" rel="noopener noreferrer nofollow"}

**Metrics Server** sert √† mesurer les informations de base : CPU et RAM. L‚Äôimportant est que ***Horizontal Pod Autoscaler*** utilise cette API pour collecter des mesures. Il s‚Äôagit d‚Äôun composant de niveau cluster qui 
r√©colte p√©riodiquement les mesures de tous les n≈ìuds Kubernetes suivis par Kubelet. Une fois install√©, **Dashboard** affiche automatiquement ces mesures.

> info "Note"
> Pour permettre √† **Metrics Server** de collecter ses donn√©es sur https, le script original a √©t√© modifi√© pour accepter les connexions TLS non s√©curis√©es en ajoutant `- --kubelet-insecure-tls` at [line 133](https://github.com/scalastic/local-k8s-installation/blob/7b0857d64475a1b4c0d1f3680f8d48f076211de8/k8s/metrics-server-components-v0.4.2.yaml#L133){:target="_blank" rel="noopener noreferrer nofollow"}.


Appliquez la configuration en entrant :
{% highlight Zsh %}
% kubectl apply -f k8s/metrics-server-components-v0.4.2.yaml
{% endhighlight %}

Lors du rechargement du **Dashboard**, vous devriez maintenant voir les utilisations du processeur et de la m√©moire (apr√®s un certain temps) üåà

Vous pouvez essayer la section ***Pods***, c‚Äôest ma pr√©f√©r√©e! 

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/dashboard-with-metrics.jpg --alt Une page du tableau de bord avec les mesures. C'est magnifique ! %}
  <figcaption>Une page du tableau de bord avec les mesures. C'est magnifique !</figcaption>
</figure>

<hr class="hr-text" data-content="Kube State Metrics">

## Kube State Metrics

Contrairement √† **Metrics Server**, **Kube State Metrics** se concentre sur la g√©n√©ration de nombreuses mesures √† partir de l‚Äô√©tat des objets Kubernetes 
(par exemple, les mesures bas√©es sur des Deployments, des Replicas, des Pods, etc.). Pour cela, il g√®re, en m√©moire, une photo des √©tats de Kubernetes
et g√©n√®re de nouvelles mesures bas√©es sur celle-ci.

- L'installation de **Kube State Metrics** permet l‚Äôacc√®s √† ces mesures √† partir de syst√®mes de surveillance tels que **Prometheus**, notre pr√©occupation ici.

- Pour installer **Kube State Metrics**, lancez la commande suivante :
{% highlight Zsh %}
% kubectl apply -f k8s/kube-state-metrics-v2.0.0-rc.1.yaml
{% endhighlight %}


<hr class="hr-text" data-content="Prometheus">

## Prometheus


**Prometheus** est un syst√®me de collecte, d‚Äôinterrogation, de surveillance et d‚Äôalerte. Il est utile quand il s‚Äôagit de :
- Collecter des donn√©es identifi√©es par un nom de m√©trique
- Stocker les s√©ries chronologiques en m√©moire et sur disque pour plus d‚Äôefficacit√©
- Lancer des notifications et des alertes en fonction des requ√™tes de donn√©es

La documentation compl√®te est accessible √† partir de [https://prometheus.io](https://prometheus.io){:target="_blank" rel="noopener noreferrer nofollow"}.

Les d√©veloppeurs de **Prometheus** fournissent des binaires et des images Docker des composants de **Prometheus**. 
Avec un peu d‚Äôhuile de coude, il est possible de cr√©er un fichier de configuration k8s avec tout ce dont nous avons besoin : acc√®s aux ressources, r√¥le d√©di√©, configuration, d√©ploiement et exposition de service.

Pour installer la configuration **Prometheus**, ex√©cutez la commande :
{% highlight Zsh %}
% kubectl apply -f k8s/prometheus.yaml
{% endhighlight %}

Vous pouvez acc√©der √† l'interface de **Prometheus** √† l'adresse <a href="http://localhost:30000/" rel="noopener noreferrer nofollow" target="_blank" data-proofer-ignore>http://localhost:30000/</a> ... mais attendez de voir la suite !


<hr class="hr-text" data-content="Grafana">

## Grafana

**Grafana** ([https://grafana.com/grafana/](https://grafana.com/grafana/){:target="_blank" rel="noopener noreferrer nofollow"}) vous permet d' ¬´ interroger, visualiser et alerter en fontion des mesures au moyen d'une interface utilisateur puissante* ¬ª comme le dit le site. 

> info "C'est ce que fait d√©j√† Prometheus !?"
> Clarifions : dans la pratique, vous d√©velopperez votre requ√™te dans **Prometheus** puis la lancerez dans **Grafana**.

Pour configurer la source de donn√©es **Prometheus** et installer **Grafana**, ex√©cutez les commandes :
{% highlight Zsh %}
% kubectl apply -f k8s/grafana-datasource.yaml
% kubectl apply -f k8s/grafana.yaml
{% endhighlight %}

**Grafana** va √©couter sur <a href="http://localhost:3000/" rel="noopener noreferrer nofollow" target="_blank" data-proofer-ignore>http://localhost:3000/</a>. Le logon par d√©faut est ***admin*** / ***admin***.

### Importation du dashboard Grafana

- Par d√©faut, **Grafana** n‚Äôa rien de sp√©cifique et vous devrez configurer un tableau de bord. Heureusement, vous pouvez en importer un, d√©j√† pr√©-configur√©,  via l‚Äôinterface de **Grafana**. La source principale de tableaux de bord se trouve √† l'adresse [https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards){:target="_blank" rel="noopener noreferrer nofollow"}.

- J‚Äôen ai fait un sp√©cifique √† un cluster kubernetes local, vous le trouverez ici [Dashboard model](https://raw.githubusercontent.com/scalastic/local-k8s-installation/main/k8s/Docker%20Desktop%20Kubernetes%20All-in-one-1618321310777.json){:target="_blank" rel="noopener noreferrer nofollow"}.

Il ressemble √† cela - comme vous pouvez le voir, l‚Äôinterface graphique **Grafana** offre de nombreuses possibilit√©s - contrairement √† **Prometheus**:

<figure class="article">
  {% picture {{site.baseurl}}/assets/img/grafana-ui.jpg --alt L'interface Grafana apr√®s une installation compl√®te. Woah! %}
  <figcaption>L'interface Grafana apr√®s une installation compl√®te. Woah!</figcaption>
</figure>

> info "üë®üèª‚Äçüíª"
> 
> Configurer un tableau de bord dans Grafana peut √™tre long et chronophage. La collecte de mesures d√©pend de votre h√¥te, de l'utilisation de VM ou solution de virtualisation et du syst√®me d‚Äôexploitation sur votre pod. Vous devrez mettre les mains dans le cambouis...

Eh bien, c‚Äôest √† votre tour de jouer avec cette stack maintenant!

Cheers...
