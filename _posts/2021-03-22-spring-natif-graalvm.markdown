---
layout: post
title: Compiler une application Spring en natif avec GraalVM
date: 2021-03-22 01:10:00 +2
description: Tuto pour compiler une application ‚ú®Spring‚ú® en code natif avec ‚ú®GraalVM‚ú® - D√©tails avec explications √† chaque √©tape.
img: spring-native-graalvm-post.jpg
fig-caption: Photo de <a href="https://unsplash.com/@helloimnik?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Hello I'm Nik ü™¥</a> sur <a href="https://unsplash.com/s/photos/rocket?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
tags: [Spring-Native, GraalVM, Spring, Docker, Tutorial]
lang: fr
permalink: /spring-natif-graalvm/
---

Avec la sortie cette semaine de Spring Native Beta en version 0.9.0, il est int√©ressant de faire un √©tat des lieux de la compilation d'applications `Spring` en ex√©cutables natifs √† l'aide de `GraalVM` et de son mode `native-image`.

L'ex√©cution d'une application en code natif a, en effet, de nombreux int√©r√™ts compar√©e √† celle en Bytecode dans une JVM :
- Le d√©marrage est instantan√©
- La performance est optimale d√®s le d√©marrage
- La consommation de la m√©moire est fortement r√©duite

La version de Spring Native est, toutefois, en Beta ce qui signifie que tous les composants de Spring ne sont pas encore fonctionnels en mode natif. Voyons en d√©tails son fonctionnement.

<hr class="hr-text" data-content="Plan">

* TOC
{:toc}

<hr class="hr-text" data-content="Installation">

## Configuration requise de base

Tout d'abord, vous devrez installer [GraalVM](https://www.graalvm.org/){:target="_blank" rel="noopener noreferrer nofollow"} et ensuite son compilateur en code natif `native-image` :

- Pour MacOS et Linux, il est recommand√© d'installer ses JDKs avec [SDKMAN](https://sdkman.io/){:target="_blank" rel="noopener noreferrer nofollow"}. Rien de compliqu√© : r√©f√©rez-vous √† la [doc. officielle](https://sdkman.io/install){:target="_blank" rel="noopener noreferrer nofollow"} ou bien retrouvez un pr√©c√©dent article sur cet outil [Installer Java avec SDKMAN](/installer-java-sdkman/)

- Pour nos amis sur Windows, reportez-vous directement √† la page [Installation on Windows Platforms](https://www.graalvm.org/docs/getting-started/windows/){:target="_blank" rel="noopener noreferrer nofollow"}

<hr class="hr-text" data-content="Squelette">

## G√©n√©ration du squelette d'application

L'arriv√©e de la version Beta implique que Spring Native est d√©sormais support√© par [Spring Initializr]( https://start.spring.io){:target="_blank" rel="noopener noreferrer nofollow"}, une interface web qui permet de composer son application Spring puis de g√©n√©rer son squelette.

Utilisons-la pour d√©finir notre application d√©mo : 
- Renseignez les m√©tadonn√©es du projet
- S√©lectionnez la d√©pendance `Spring Native [Experimental]` pour b√©n√©ficier de la compilation native
- Ajoutez la d√©pendance `Spring Web` dans le cadre de cette d√©mo
- T√©l√©chargez le code g√©n√©r√© en cliquant sur le bouton `Generate`

{% figure caption:"Interface Spring Initializr pour l'application d√©mo" class:"article" %}
![Ecran Spring Initializr pour la d√©mo]({{site.baseurl}}/assets/img/spring-initializr-demo.jpg)
{% endfigure %}

### Modules Spring Native

Vous trouverez, dans le POM, la liste de modules Spring configur√©s en tant que d√©pendances Maven :

- La d√©pendance `Spring Native` et sa version :

{% highlight maven %}
<properties>
<java.version>11</java.version>
<spring-native.version>0.9.1-SNAPSHOT</spring-native.version>
</properties>
.../...
<dependency>
  <groupId>org.springframework.experimental</groupId>
  <artifactId>spring-native</artifactId>
  <version>${spring-native.version}</version>
</dependency>
{% endhighlight %}

- Le plugin `Spring Boot Maven` et sa configuration pour ex√©cuter le build d'une image native dans un conteneur [Buildpacks](https://buildpacks.io){:target="_blank" rel="noopener noreferrer nofollow"} :

{% highlight maven %}
<plugin>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-maven-plugin</artifactId>
	<configuration>
	  <image>
	    <builder>paketobuildpacks/builder:tiny</builder>
	    <env>
	      <BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
	    </env>
	  </image>
	</configuration>
</plugin>
{% endhighlight %}

- Le plugin `AOT Maven` qui sert √† configurer Spring pour sa compilation `Ahead-Of-Time` ainsi qu'√† g√©n√©rer du code pour la configuration et le classpath de l'application :

{% highlight maven %}
<plugin>
  <groupId>org.springframework.experimental</groupId>
  <artifactId>spring-aot-maven-plugin</artifactId>
  <version>${spring-native.version}</version>
  <executions>
    <execution>
      <id>test-generate</id>
      <goals>
        <goal>test-generate</goal>
      </goals>
    </execution>
    <execution>
      <id>generate</id>
      <goals>
        <goal>generate</goal>
      </goals>
    </execution>
  </executions>
</plugin>
{% endhighlight %}

### Remarques

	> warning "D√©pendances non support√©es"	
	> Au cas o√π vous s√©lectionneriez une d√©pendance Spring non encore support√©e dans le mode natif, le fichier `HELP.md` contiendra un avertissement :

{% figure caption:"Avertissement dans le fichier HELP.md" class:"article" %}
![Avertissement Spring dans HELP.md]({{site.baseurl}}/assets/img/spring-initializr-help.jpg)
{% endfigure %}


	> info "D√©pendances support√©es"	
	> - Dans le cas des d√©pendances support√©es par Spring, l'initializr va configurer tous les plugins n√©cessaires pour que le build et l'ex√©cution de l'application Spring fonctionnent ***out-of-the-box*** !

 Dans l'exemple de `Spring Data JPA`, Maven sera configur√© pour que les classes Hibernate soient compil√©es au moment du build de l'application et non pas lors de son runtime comme c'est le cas pour une JVM :

{% highlight maven %}
<plugin>
  <groupId>org.hibernate.orm.tooling</groupId>
  <artifactId>hibernate-enhance-maven-plugin</artifactId>
  <version>${hibernate.version}</version>
  <executions>
    <execution>
      <id>enhance</id>
      <goals>
        <goal>enhance</goal>
      </goals>
      <configuration>
        <failOnError>true</failOnError>
        <enableLazyInitialization>true</enableLazyInitialization>
        <enableDirtyTracking>true</enableDirtyTracking>
        <enableAssociationManagement>true</enableAssociationManagement>
        <enableExtendedEnhancement>false</enableExtendedEnhancement>
      </configuration>
    </execution>
  </executions>
</plugin>
{% endhighlight %}


Tout cela est tr√®s rassurant ! J'avais test√© auparavant la version `0.7.1` de Spring Native (nomm√© spring-graalvm-native √† l'√©poque) et il y avait alors beaucoup de modifications manuelles √† apporter. 

> note "But affich√© de l'√©quipe en charge de Spring Native"
> - Fournir une **configuration automatiquement** afin qu'il n'y ait pas besoin de modifier le code Java, que l'application soit ex√©cut√©e en mode natif ou dans une JVM.
> - Faire en sorte que les **tests unitaires** s'ex√©cutent de la m√™me fa√ßon dans une image native ou dans une JVM.
> - R√©duire encore plus la taille de l'image native g√©n√©r√©e dans la prochaine version 0.10 de Spring Native.

<hr class="hr-text" data-content="Impl√©mentation de la d√©mo">

## Ajout d'un Controller Web

- D√©zippez le fichier g√©n√©r√© par `Spring Initializr` et ouvrez le r√©pertoire avec votre IDE pr√©f√©r√©.

- Cr√©ez un nouveau Controller √† la racine du package de votre projet avec le code ci-dessous :

{% highlight java linedivs %}
package io.scalastic.demo.demo_spring_native;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class DemoSpringNativeController {

    @GetMapping("/")
    public String hello() {
        return "Hello!";
    }

}
{% endhighlight %}

{% figure caption:"Le projet et son Controller dans IntelliJ IDEA" class:"article" %}
![IntelliJ IDEA projet d√©mo]({{site.baseurl}}/assets/img/spring-initializr-demo-intellij.png)
{% endfigure %}

<hr class="hr-text" data-content="Compilation">

## Compilation en code natif

Il existe deux fa√ßons de compiler une application Spring en code natif :
- En utilisant le [Buildpack Spring Boot](https://github.com/paketo-buildpacks/spring-boot){:target="_blank" rel="noopener noreferrer nofollow"} int√©gr√© √† Spring et qui va produire un conteneur l√©ger contenant le code natif de l'application
- En utilisant le plugin Maven [native-image-maven-plugin](https://www.graalvm.org/reference-manual/native-image/NativeImageMavenPlugin/){:target="_blank" rel="noopener noreferrer nofollow"} qui va produire un ex√©cutable natif


> warning "Remarque"
> La configuration Maven g√©n√©r√©e par Spring Initializr fait le choix de Buildpacks :
> - Nous n'aborderons par cons√©quent que cet aspect dans cet article.
> - Nous verrons le build natif √† l'aide du plugin Maven **native-image** qui n√©cessite des modifications importantes du POM, dans un prochain article.

### Utilisation du Buildpack Spring Boot

Cette proc√©dure permet d'obtenir un conteneur Docker qui contient l'application compil√©e en code natif. Il est l√©ger et peut √™tre d√©ploy√© directement dans un orchestrateur de conteneurs.

#### Pr√©-requis

[Docker](https://www.docker.com){:target="_blank" rel="noopener noreferrer nofollow"} doit √™tre install√© afin de pouvoir lancer le **Buildpack Spring Boot**. C'est un conteneur qui contient tout le n√©cessaire pour builder une application Spring en code natif.

- Vous pouvez installer **Docker** √† partir de [Docker Installation](https://docs.docker.com/installation/#installation){:target="_blank" rel="noopener noreferrer nofollow"}
- Pour MacOS, il est recommand√© d'allouer au moins **8Go** de m√©moire √† Docker
- Pour Windows, il faut activer [Docker WSL 2 Backend](https://docs.docker.com/docker-for-windows/wsl/){:target="_blank" rel="noopener noreferrer nofollow"} pour avoir de meilleures performances


#### Compilation en mode natif avec Buildpacks

- L'application native peut √™tre compil√©e en lan√ßant la commande suivante :

{% highlight zsh %}
% mvn spring-boot:build-image
[INFO] Scanning for projects...
[INFO] 
[INFO] ----------------< io.scalastic.demo:demo_spring_native >----------------
[INFO] Building demo_spring_native 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot-maven-plugin:2.4.4:build-image (default-cli) > package @ demo_spring_native >>>
[INFO] 
[INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ demo_spring_native ---

[.../...]

[INFO] Successfully built image 'docker.io/library/demo_spring_native:0.0.1-SNAPSHOT'
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  03:03 min
[INFO] Finished at: 2021-03-21T20:57:29+01:00
[INFO] ------------------------------------------------------------------------

Process finished with exit code 0
{% endhighlight %}

  Cette commande va cr√©er, en local, un conteneur Linux pour compiler l'application native √† partir du compilateur `native-image` de GraalVM.

- Regardons les images pr√©sentes, dans le registre Docker local et qui viennent d'√™tre mises en oeuvre dans ce build :

{% highlight zsh %}
% docker images
REPOSITORY                 TAG              IMAGE ID       CREATED        SIZE
paketobuildpacks/run       tiny-cnb         e85a0fe734d7   17 hours ago   17.3MB
paketobuildpacks/builder   tiny             1cbb20e3de7e   41 years ago   401MB
demo_spring_native         0.0.1-SNAPSHOT   a423116a12a8   41 years ago   81.9MB
{% endhighlight %}

On constate que ce processus produit 3 images Docker :
- **paketobuildpacks/run:tiny-cnb** : Le `runner` bas√© sur `distroless` bionic + glibc + openssl + CA certs pour ex√©cuter une application en code natif. C'est le conteneur de base servant √† encapsuler une application en code natif.
- **paketobuildpacks/builder:tiny** : Le `builder` bas√© sur une stack `distroless` ubuntu:bionic + openssl + CA certs + compilers + shell utilities. C'est un Buildpack servant √† compiler la plupart des applications en Go et les applications Java en code natif avec GraalVM.
- **demo_spring_native:0.0.1-SNAPSHOT** : L'application, en code natif, encapsul√©e dans un runner de base `distroless`.

> note "Pour aller plus loin"
> - Les images issues du Buildpack datent de 1980, du 1er janvier 1980 exactement ! C'est tout √† fait voulu et l'explication se trouve l√† : [Time Travel with Pack](https://medium.com/buildpacks/time-travel-with-pack-e0efd8bf05db){:target="_blank" rel="noopener noreferrer nofollow"}
> - Les stacks [Distroless](https://github.com/GoogleContainerTools/distroless){:target="_blank" rel="noopener noreferrer nofollow"} sont des images minimalistes, d√©velopp√©es par Google et qui am√©liorent la s√©curit√© et la taille des conteneurs en diminuant la surface des attaques et le nombre de composants qu'elles int√®grent. 
> - La notion de [Runner et Builder](https://paketo.io/docs/stacks/#what-is-a-stack){:target="_blank" rel="noopener noreferrer nofollow"} dans les Buildpacks.

#### Ex√©cution de l'application

- Pour d√©marrer l'application issue du Buildpack, tapez la commande suivante:

{% highlight zsh %}
% docker run -p 8080:8080 docker.io/library/demo_spring_native:0.0.1-SNAPSHOT
2021-03-21 19:32:54.188  INFO 1 --- [           main] o.s.nativex.NativeListener               : This application is bootstrapped with code generated with Spring AOT

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.4.4)

2021-03-21 19:32:54.190  INFO 1 --- [           main] i.s.d.d.DemoSpringNativeApplication      : Starting DemoSpringNativeApplication using Java 11.0.10 on 91a2f0962a8e with PID 1 (/workspace/io.scalastic.demo.demo_spring_native.DemoSpringNativeApplication started by cnb in /workspace)
2021-03-21 19:32:54.190  INFO 1 --- [           main] i.s.d.d.DemoSpringNativeApplication      : No active profile set, falling back to default profiles: default
2021-03-21 19:32:54.218  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
Mar 21, 2021 7:32:54 PM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler ["http-nio-8080"]
Mar 21, 2021 7:32:54 PM org.apache.catalina.core.StandardService startInternal
INFO: Starting service [Tomcat]
Mar 21, 2021 7:32:54 PM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet engine: [Apache Tomcat/9.0.44]
Mar 21, 2021 7:32:54 PM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring embedded WebApplicationContext
2021-03-21 19:32:54.220  INFO 1 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 29 ms
2021-03-21 19:32:54.231  INFO 1 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
Mar 21, 2021 7:32:54 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler ["http-nio-8080"]
2021-03-21 19:32:54.240  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-03-21 19:32:54.241  INFO 1 --- [           main] i.s.d.d.DemoSpringNativeApplication      : Started DemoSpringNativeApplication in 0.057 seconds (JVM running for 0.06)
{% endhighlight %}

- Testez son fonctionnement avec :

{% highlight zsh %}
% curl http://127.0.0.1:8080
Hello!
{% endhighlight %}

Ca marche ! Magnifique !!

> info "Caract√©ristiques du Buildpacks"
> - La compilation dure 3 min (avec les images Docker et les artefacts Maven en local)
> - L'application d√©marre en 0.06 s
> - L'image Docker contenant l'application Spring et l'OS, fait une taille de 82 Mo

<hr class="hr-text" data-content="Conclusion">

## Conclusion

- La version **Spring Native 0.9.0** nous a permis de compiler facilement une application Spring en mode natif.
- Comme attendu, les b√©n√©fices du mode natif sont un d√©marrage instantan√© et une taille de conteneur fortement r√©duite.

Points int√©ressants, cela engendre de nouvelles utilisations :
- la gestion du **High Availability** peut se faire avec une seule instance, le d√©marrage d'une seconde √©tant instantan√©e.
- le d√©marrage instantan√© permet aussi √† une application web d'√™tre serverless, sans avoir besoin d'√™tre red√©velopp√©e.
- Avec Knative (un redesign de Kubernetes qui d√©marre des conteneurs serverless), GraalVM Native est une solution tr√®s bien adapt√©e.

Spring Native sera, √† terme, int√©gr√© dans **Spring Boot 3** et **Spring Framework 6**, le but √©tant de sp√©cifier uniquement dans le build Maven ou Graddle, la cible attendue (native ou autre). Le travail restant consiste √† optimiser la taille du code natif g√©n√©r√©e, prendre en compte plus d'APIs Spring et am√©liorer l'ex√©cution des tests dans l'image native (JUnit 5,...)

A suivre de pr√®s donc !

{{ "/graalvm-microservices-java/|GraalVM, le futur des applications microservices en Java||" | pagination: site.data.i18n.article-previous, site.data.i18n.article-next }}

Cheers...

> info "Et maintenant"
> * Vous avez aim√© cet article ? Dites-le ci-dessous afin que le blog gagne en visibilit√©.
> * Vous avez une question ? Posez-la en commentaire, je m'efforcerai d'y r√©pondre dans les plus brefs d√©lais !!
> 
> Merci √† vous !
>
